// Package repository provides data access layer for the {{.ServiceName}} service.
//
// Overview:
//   - Responsibility: Database operations and data persistence
//   - Key Types: {{.ServiceNameCamel}}Repository interface and implementation
//   - Concurrency Model: Thread-safe database operations with context
//   - Error Semantics: Database errors are wrapped and returned
//   - Performance Notes: Optimized queries with proper indexing
//
// Usage:
//
//	repo := New{{.ServiceNameCamel}}Repository(db)
//	{{.ServiceNameVar}}, err := repo.Create(ctx, &{{.ServiceNameCamel}}{Name: "example"})
package repository

import (
	"context"

	"github.com/eggybyte-technology/egg/core/errors"
	"{{.ModulePrefix}}/backend/{{.ServiceName}}/internal/model"
	"gorm.io/gorm"
)

// {{.ServiceNameCamel}}Repository defines the interface for {{.ServiceName}} data operations.
// All methods are context-aware and return structured errors.
type {{.ServiceNameCamel}}Repository interface {
	// Create creates a new {{.ServiceName}} in the database.
	// Returns the created {{.ServiceName}} with generated ID and timestamps.
	Create(ctx context.Context, {{.ServiceNameVar}} *model.{{.ServiceNameCamel}}) (*model.{{.ServiceNameCamel}}, error)

	// GetByID retrieves a {{.ServiceName}} by their ID.
	// Returns Err{{.ServiceNameCamel}}NotFound if {{.ServiceName}} doesn't exist.
	GetByID(ctx context.Context, id string) (*model.{{.ServiceNameCamel}}, error)

	// Update updates an existing {{.ServiceName}} in the database.
	// Returns Err{{.ServiceNameCamel}}NotFound if {{.ServiceName}} doesn't exist.
	Update(ctx context.Context, {{.ServiceNameVar}} *model.{{.ServiceNameCamel}}) (*model.{{.ServiceNameCamel}}, error)

	// Delete removes a {{.ServiceName}} from the database by ID.
	// Returns Err{{.ServiceNameCamel}}NotFound if {{.ServiceName}} doesn't exist.
	Delete(ctx context.Context, id string) error

	// List retrieves {{.ServiceName}}s with pagination.
	// Returns empty list if no {{.ServiceName}}s found.
	List(ctx context.Context, page, pageSize int) ([]*model.{{.ServiceNameCamel}}, int64, error)
}

// {{.ServiceNameCamel}}Repository implements the {{.ServiceNameCamel}}Repository interface using GORM.
type {{.ServiceNameCamel}}Repository struct {
	db *gorm.DB
}

// New{{.ServiceNameCamel}}Repository creates a new {{.ServiceNameCamel}}Repository instance.
// The returned repository is safe for concurrent use.
func New{{.ServiceNameCamel}}Repository(db *gorm.DB) {{.ServiceNameCamel}}Repository {
	return &{{.ServiceNameCamel}}Repository{db: db}
}

// Create creates a new {{.ServiceName}} in the database.
func (r *{{.ServiceNameCamel}}Repository) Create(ctx context.Context, {{.ServiceNameVar}} *model.{{.ServiceNameCamel}}) (*model.{{.ServiceNameCamel}}, error) {
	if err := {{.ServiceNameVar}}.Validate(); err != nil {
		return nil, errors.Wrap(errors.CodeInvalidArgument, "{{.ServiceName}} validation", err)
	}

	if err := r.db.WithContext(ctx).Create({{.ServiceNameVar}}).Error; err != nil {
		return nil, errors.Wrap(errors.CodeInternal, "create {{.ServiceName}}", err)
	}

	return {{.ServiceNameVar}}, nil
}

// GetByID retrieves a {{.ServiceName}} by their ID.
func (r *{{.ServiceNameCamel}}Repository) GetByID(ctx context.Context, id string) (*model.{{.ServiceNameCamel}}, error) {
	var {{.ServiceNameVar}} model.{{.ServiceNameCamel}}
	if err := r.db.WithContext(ctx).First(&{{.ServiceNameVar}}, "id = ?", id).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, errors.Wrap(errors.CodeNotFound, "get {{.ServiceName}} by id", model.Err{{.ServiceNameCamel}}NotFound)
		}
		return nil, errors.Wrap(errors.CodeInternal, "get {{.ServiceName}} by id", err)
	}

	return &{{.ServiceNameVar}}, nil
}

// Update updates an existing {{.ServiceName}} in the database.
func (r *{{.ServiceNameCamel}}Repository) Update(ctx context.Context, {{.ServiceNameVar}} *model.{{.ServiceNameCamel}}) (*model.{{.ServiceNameCamel}}, error) {
	if err := {{.ServiceNameVar}}.Validate(); err != nil {
		return nil, errors.Wrap(errors.CodeInvalidArgument, "{{.ServiceName}} validation", err)
	}

	// Check if {{.ServiceName}} exists
	var existing{{.ServiceNameCamel}} model.{{.ServiceNameCamel}}
	if err := r.db.WithContext(ctx).First(&existing{{.ServiceNameCamel}}, "id = ?", {{.ServiceNameVar}}.ID).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, errors.Wrap(errors.CodeNotFound, "check {{.ServiceName}} existence", model.Err{{.ServiceNameCamel}}NotFound)
		}
		return nil, errors.Wrap(errors.CodeInternal, "check {{.ServiceName}} existence", err)
	}

	if err := r.db.WithContext(ctx).Save({{.ServiceNameVar}}).Error; err != nil {
		return nil, errors.Wrap(errors.CodeInternal, "update {{.ServiceName}}", err)
	}

	return {{.ServiceNameVar}}, nil
}

// Delete removes a {{.ServiceName}} from the database by ID.
func (r *{{.ServiceNameCamel}}Repository) Delete(ctx context.Context, id string) error {
	result := r.db.WithContext(ctx).Delete(&model.{{.ServiceNameCamel}}{}, "id = ?", id)
	if result.Error != nil {
		return errors.Wrap(errors.CodeInternal, "delete {{.ServiceName}}", result.Error)
	}

	if result.RowsAffected == 0 {
		return errors.Wrap(errors.CodeNotFound, "get {{.ServiceName}} by id", model.Err{{.ServiceNameCamel}}NotFound)
	}

	return nil
}

// List retrieves {{.ServiceName}}s with pagination.
func (r *{{.ServiceNameCamel}}Repository) List(ctx context.Context, page, pageSize int) ([]*model.{{.ServiceNameCamel}}, int64, error) {
	if page < 1 {
		page = 1
	}
	if pageSize < 1 || pageSize > 100 {
		pageSize = 10
	}

	offset := (page - 1) * pageSize

	var {{.ServiceNameVar}}s []*model.{{.ServiceNameCamel}}
	var total int64

	// Get total count
	if err := r.db.WithContext(ctx).Model(&model.{{.ServiceNameCamel}}{}).Count(&total).Error; err != nil {
		return nil, 0, errors.Wrap(errors.CodeInternal, "count {{.ServiceName}}s", err)
	}

	// Get {{.ServiceName}}s with pagination
	if err := r.db.WithContext(ctx).Offset(offset).Limit(pageSize).Order("created_at DESC").Find(&{{.ServiceNameVar}}s).Error; err != nil {
		return nil, 0, errors.Wrap(errors.CodeInternal, "list {{.ServiceName}}s", err)
	}

	return {{.ServiceNameVar}}s, total, nil
}
