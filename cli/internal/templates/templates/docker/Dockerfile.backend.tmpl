# ==============================================================================
# EggyByte Enterprise Go Service Dockerfile (Builder + Runtime)
# ------------------------------------------------------------------------------
# Version: v1.0.1
# Language: Go 1.25.1
# Base OS: Alpine 3.22
# ------------------------------------------------------------------------------
# Purpose:
#   - Unified, enterprise-grade multi-platform Dockerfile
#   - Supports builder/runtime separation in a single file
#   - Allows fully configurable OUT_DIR across all stages
# ------------------------------------------------------------------------------
# Directory layout:
#   backend/go.work
#   backend/<service>/cmd/server
#   gen/go/   (buf-generated Go code)
# ==============================================================================

# ------------------------------------------------------------------------------
# Global build arguments (visible in all stages)
# ------------------------------------------------------------------------------
ARG GO_VERSION=1.25.1
ARG OUT_DIR=/out                # Unified output directory across all stages
ARG SERVICE_NAME=user           # Default service
ARG PROJECT_NAME                # Project name (required)
ARG MODULE_PREFIX               # Module prefix (required)
ARG VERSION                     # Version (required)
ARG HTTP_PORT=8080
ARG HEALTH_PORT=8081
ARG METRICS_PORT=9091

# ------------------------------------------------------------------------------
# Builder Stage
# ------------------------------------------------------------------------------
# Docker BuildKit automatically handles platform selection based on --platform flag.
# Base images will be pulled for the target platform specified in build command.
FROM ghcr.io/eggybyte-technology/eggybyte-go-builder:go${GO_VERSION}-alpine3.22 AS builder

LABEL org.opencontainers.image.title="EggyByte Builder" \
      org.opencontainers.image.description="Build stage for EggyByte Go microservices" \
      org.opencontainers.image.vendor="EggyByte Technology"

# Inherit global args
ARG SERVICE_NAME
ARG OUT_DIR
ARG HTTP_PORT
ARG HEALTH_PORT
ARG METRICS_PORT
ARG TARGETOS TARGETARCH

WORKDIR /src

# Copy only necessary files to ensure build cache efficiency
COPY gen/go gen/go
COPY backend backend

# Download dependencies and update go.sum with checksum verification disabled
# Use GOPROXY with fallback: try proxy first, then direct for v0.0.0-dev dependencies
# Use GOSUMDB=off to disable checksum verification for development versions
# Use GOPRIVATE and GONOPROXY to ensure internal modules (go.eggybyte.com/egg/*) are downloaded directly
# Configuration: https://goproxy.cn,direct (China optimized) for better support in China
# This provides better reliability than direct-only mode while allowing direct access for internal modules
RUN cd backend/${SERVICE_NAME} && \
    GOPROXY=https://goproxy.cn,direct \
    GOPRIVATE=go.eggybyte.com/egg \
    GONOPROXY=go.eggybyte.com/egg \
    GOSUMDB=off \
    GOTIMEOUT=300s \
    go mod download && \
    GOPROXY=https://goproxy.cn,direct \
    GOPRIVATE=go.eggybyte.com/egg \
    GONOPROXY=go.eggybyte.com/egg \
    GOSUMDB=off \
    GOTIMEOUT=300s \
    go mod tidy

# Build the service binary
# Use GOPROXY with fallback for better network reliability
# Internal modules (go.eggybyte.com/egg/*) will be downloaded directly via GONOPROXY
RUN echo "Building service '${SERVICE_NAME}' for ${TARGETOS}/${TARGETARCH}" && \
    mkdir -p ${OUT_DIR}/${SERVICE_NAME} && \
    cd backend/${SERVICE_NAME} && \
    CGO_ENABLED=0 \
    GOPROXY=https://goproxy.cn,direct \
    GOPRIVATE=go.eggybyte.com/egg \
    GONOPROXY=go.eggybyte.com/egg \
    GOSUMDB=off \
    GOTIMEOUT=300s \
    GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build -trimpath -ldflags="-s -w" \
    -o ${OUT_DIR}/${SERVICE_NAME}/server ./cmd/server && \
    echo "Binary built at ${OUT_DIR}/${SERVICE_NAME}/server"

# ------------------------------------------------------------------------------
# Runtime Stage
# ------------------------------------------------------------------------------
# Docker BuildKit automatically handles platform selection based on --platform flag.
# Base images will be pulled for the target platform specified in build command.
FROM ghcr.io/eggybyte-technology/eggybyte-go-alpine:go${GO_VERSION}-alpine3.22 AS runtime

# Inherit same args to maintain global consistency
# Note: ARG declarations must come BEFORE LABEL to avoid undefined variable warnings
ARG SERVICE_NAME
ARG OUT_DIR
ARG HTTP_PORT
ARG HEALTH_PORT
ARG METRICS_PORT
ARG PROJECT_NAME
ARG MODULE_PREFIX
ARG VERSION

LABEL org.opencontainers.image.title="${PROJECT_NAME}-${SERVICE_NAME}" \
      org.opencontainers.image.description="EggyByte microservice: ${SERVICE_NAME}" \
      org.opencontainers.image.source="${MODULE_PREFIX}" \
      org.opencontainers.image.vendor="EggyByte Technology" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.version="${VERSION}"

WORKDIR /app

# Copy the binary from builder using the unified OUT_DIR path
COPY --from=builder ${OUT_DIR}/${SERVICE_NAME}/server /app/app

# Set standard runtime environment
ENV SERVICE_NAME=${SERVICE_NAME} \
    OUT_DIR=${OUT_DIR} \
    HTTP_PORT=${HTTP_PORT} \
    HEALTH_PORT=${HEALTH_PORT} \
    METRICS_PORT=${METRICS_PORT}

# Expose standard EggyByte service ports
EXPOSE ${HTTP_PORT} ${HEALTH_PORT} ${METRICS_PORT}

ENTRYPOINT ["/app/app"]
