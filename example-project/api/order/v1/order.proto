syntax = "proto3";

package order.v1;

option go_package = "github.com/eggybyte-technology/example-platform/gen/go/order/v1;orderv1";

// OrderService handles order operations.
service OrderService {
  // CreateOrder creates a new order.
  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);
  
  // GetOrder retrieves an order by ID.
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse);
}

// CreateOrderRequest contains the order creation data.
message CreateOrderRequest {
  string user_id = 1;
  repeated OrderItem items = 2;
}

// OrderItem represents a single item in an order.
message OrderItem {
  string product_id = 1;
  int32 quantity = 2;
  double price = 3;
}

// CreateOrderResponse contains the created order.
message CreateOrderResponse {
  string order_id = 1;
  OrderStatus status = 2;
}

// GetOrderRequest contains the order ID.
message GetOrderRequest {
  string order_id = 1;
}

// GetOrderResponse contains the order details.
message GetOrderResponse {
  string order_id = 1;
  string user_id = 2;
  repeated OrderItem items = 3;
  OrderStatus status = 4;
  int64 created_at = 5;
}

// OrderStatus represents the current status of an order.
enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;
  ORDER_STATUS_PENDING = 1;
  ORDER_STATUS_CONFIRMED = 2;
  ORDER_STATUS_SHIPPED = 3;
  ORDER_STATUS_DELIVERED = 4;
  ORDER_STATUS_CANCELLED = 5;
}

